apiVersion: v1
kind: Secret
metadata:
  name: clairsecret
stringData:
  config.yaml: |
    # Copyright 2015 clair authors
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # The values specified here are the default values that Clair uses if no configuration file is specified or if the keys are not defined.
    clair:
      database:
        # Database driver
        type: pgsql
        options:
          # PostgreSQL Connection string
          # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
          source: host=localhost port=5432 user=postgres password=password sslmode=disable

          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

      api:
        # API server port
        port: 6060

        # Health server port
        # This is an unencrypted endpoint useful for load balancers to check to healthiness of the clair server.
        healthport: 6061

        # Deadline before an API request will respond with a 503
        timeout: 900s

        # 32-bit URL-safe base64 key used to encrypt pagination tokens
        # If one is not provided, it will be generated.
        # Multiple clair instances in the same cluster need the same value.
        paginationkey:

        # Optional PKI configuration
        # If you want to easily generate client certificates and CAs, try the following projects:
        # https://github.com/coreos/etcd-ca
        # https://github.com/cloudflare/cfssl
        servername:
        cafile:
        keyfile:
        certfile:

      updater:
        # Frequency the database will be updated with vulnerabilities from the default data sources
        # The value 0 disables the updater entirely.
        interval: 2h

      notifier:
        # Number of attempts before the notification is marked as failed to be sent
        attempts: 3

        # Duration before a failed notification is retried
        renotifyinterval: 2h

        http:
          # Optional endpoint that will receive notifications via POST requests
          endpoint:

          # Optional PKI configuration
          # If you want to easily generate client certificates and CAs, try the following projects:
          # https://github.com/cloudflare/cfssl
          # https://github.com/coreos/etcd-ca
          servername:
          cafile:
          keyfile:
          certfile:

          # Optional HTTP Proxy: must be a valid URL (including the scheme).
          proxy:

---
apiVersion: v1
kind: Service
metadata:
  name: clairsvc
  labels:
    app: clair
spec:
  type: NodePort
  ports:
  - port: 6060
    protocol: TCP
    nodePort: 30060
    name: clair-port0
  - port: 6061
    protocol: TCP
    nodePort: 30061
    name: clair-port1
  selector:
    app: clair

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clair
  labels:
    app: clair
spec:
  selector:
    matchLabels:
      app: clair
  template:
    metadata:
      labels:
        app: clair
    spec:
      containers:
        - name: postgresql
          image: docker.io/library/postgres:9.6
          env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
            - name: PGDATA
              value: /var/lib/postgresql/data/dbdata
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-vol
        - name: clair
          image: quay.io/coreos/clair:v2.1.4
          ports:
            - containerPort: 6060
            - containerPort: 6061
          args: ['-config', '/config/config.yaml']
          volumeMounts:
            - mountPath: /config
              name: secret-volume
      volumes:
      - name: secret-volume
        secret:
          secretName: clairsecret
      - name: postgres-vol
        emptyDir: {}
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: postgres
#   labels:
#     app: clair
# spec:
#   selector:
#     matchLabels:
#       app: clair
#   template:
#     metadata:
#       labels:
#         app: clair
#     spec:
#       containers:
#         - name: postgresql
#           image: docker.io/library/postgres:9.6
#           resources:
#             limits:
#               memory: 256Mi
#               cpu: 500m
#           env:
#             - name: POSTGRES_HOST_AUTH_METHOD
#               value: trust
#             - name: PGDATA
#               value: /var/lib/postgresql/data/dbdata
#           volumeMounts:
#             - mountPath: /var/lib/postgresql/data
#               name: postgres-vol
#       volumes:
#       - name: secret-volume
#         secret:
#           secretName: clairsecret
#       - name: postgres-vol
#         emptyDir: {}